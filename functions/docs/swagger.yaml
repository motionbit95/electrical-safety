openapi: "3.0.0"
info:
  title: "전기안전 - Firebase Functions API"
  version: "1.0.0"
  description: |
    ## 🚀 Endpoint
    배포가 완료되면 아래 주소에서 API를 확인할 수 있습니다.

    - `https://us-central1-electrical-safety-4c9bd.cloudfunctions.net/api`
      <br>  <br>
    - `https://api-2hj4xnf47q-uc.a.run.app`

paths:
  /auth/admin/signup:
    post:
      tags:
        - Admin
      summary: "관리자 회원가입"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - admin_id
                - admin_pw
              properties:
                admin_id:
                  type: string
                  description: "관리자 ID"
                  example: "admin123"
                admin_pw:
                  type: string
                  description: "관리자 비밀번호"
                  example: "securePassword123!"
      responses:
        "201":
          description: "관리자 회원가입 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "관리자 회원가입 성공"
        "400":
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: -2000
                  message:
                    type: string
                    example: "admin_id와 admin_pw를 입력하세요."
        "500":
          description: "서버 오류"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: -2002
                  message:
                    type: string
                    example: "관리자 회원가입 중 서버 오류 발생"

  /auth/admin/login:
    post:
      tags:
        - Admin
      summary: "관리자 로그인"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - admin_id
                - admin_pw
              properties:
                admin_id:
                  type: string
                  description: "관리자 ID"
                  example: "admin123"
                admin_pw:
                  type: string
                  description: "관리자 비밀번호"
                  example: "securePassword123!"
      responses:
        "200":
          description: "관리자 로그인 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "관리자 로그인 성공"
                  token:
                    type: string
                    example: "jwt_token_here"
                  lastActiveAt:
                    type: string
                    format: date-time
                    example: "2025-03-24T12:00:00.000Z"
        "400":
          description: "잘못된 요청"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: -2000
                  message:
                    type: string
                    example: "admin_id와 admin_pw를 입력하세요."
        "500":
          description: "서버 오류"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: -2004
                  message:
                    type: string
                    example: "관리자 로그인 처리 중 서버 오류 발생"

  /auth/admin/{admin_id}:
    delete:
      tags:
        - Admin
      summary: "관리자 탈퇴"
      parameters:
        - name: admin_id
          in: path
          required: true
          schema:
            type: string
          description: "탈퇴할 관리자 ID"
      responses:
        "200":
          description: "관리자 탈퇴 성공"
        "400":
          description: "잘못된 요청"
        "500":
          description: "서버 오류"

  /auth/admins:
    get:
      tags:
        - Admin
      summary: "모든 관리자 목록 조회"
      responses:
        "200":
          description: "관리자 목록 반환"
        "404":
          description: "관리자가 없음"
        "500":
          description: "서버 오류"

  /auth/signup:
    post:
      tags:
        - User
      summary: "회원가입"
      description: "새로운 사용자를 등록하는 API입니다."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - user_pw
              properties:
                user_id:
                  type: string
                  description: "사용자의 고유 아이디"
                  example: "user123"
                user_pw:
                  type: string
                  description: "사용자의 비밀번호"
                  example: "password123"
      responses:
        201:
          description: "회원가입 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "회원가입 성공"
        400:
          description: "잘못된 요청 (user_id 또는 user_pw가 누락된 경우)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: -1000
                  message:
                    type: string
                    example: "user_id와 user_pw를 입력하세요."
        409:
          description: "이미 존재하는 사용자 ID"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: -1001
                  message:
                    type: string
                    example: "이미 존재하는 user_id입니다."
        500:
          description: "서버 오류"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: -1002
                  message:
                    type: string
                    example: "회원가입 중 서버 오류가 발생했습니다."

  /auth/login:
    post:
      tags:
        - User
      summary: "로그인"
      description: "user_id와 user_pw로 로그인하고 JWT 토큰을 발급받는 API입니다."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - user_pw
              properties:
                user_id:
                  type: string
                  description: "사용자의 고유 아이디"
                  example: "user123"
                user_pw:
                  type: string
                  description: "사용자의 비밀번호"
                  example: "password123"
      responses:
        200:
          description: "로그인 성공 (JWT 토큰 포함)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "로그인 성공"
                  token:
                    type: string
                    description: "JWT 토큰 (발급된 인증 토큰)"
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  lastActiveAt:
                    type: string
                    format: date-time
                    description: "마지막 로그인 시간"
                    example: "2025-01-23T12:34:56.789Z"
        400:
          description: "잘못된 요청 (user_id 또는 user_pw가 올바르지 않음)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: -1000
                  message:
                    type: string
                    example: "user_id와 user_pw를 입력하세요."
        404:
          description: "존재하지 않는 user_id"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: -1001
                  message:
                    type: string
                    example: "존재하지 않는 user_id입니다."
        401:
          description: "비밀번호가 일치하지 않음"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: -1003
                  message:
                    type: string
                    example: "비밀번호가 일치하지 않습니다."
        500:
          description: "서버 오류"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: -1004
                  message:
                    type: string
                    example: "로그인 처리 중 서버 오류가 발생했습니다."

  /auth/{user_id}:
    delete:
      tags:
        - User
      summary: "사용자 탈퇴"
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: "탈퇴할 사용자 ID"
      responses:
        "200":
          description: "사용자 탈퇴 성공"
        "400":
          description: "잘못된 요청"
        "500":
          description: "서버 오류"

  /auth/users:
    get:
      tags:
        - User
      summary: "모든 사용자 목록 조회"
      responses:
        "200":
          description: "사용자 목록 반환"
        "404":
          description: "사용자가 없음"
        "500":
          description: "서버 오류"

  /notice:
    get:
      tags:
        - Notice
      summary: "전체 공지사항 조회"
      description: "저장된 모든 공지사항을 조회하는 API입니다."
      responses:
        200:
          description: "공지사항 목록"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: "공지사항 ID"
                      example: "abcd1234"
                    title:
                      type: string
                      description: "공지사항 제목"
                      example: "전기안전 점검 안내"
                    content:
                      type: string
                      description: "공지사항 내용"
                      example: "이번 주 금요일 전기안전 점검이 진행됩니다."
                    author:
                      type: string
                      description: "작성자"
                      example: "관리자"
                    createdAt:
                      type: string
                      format: date-time
                      description: "공지사항 작성 일시"
                      example: "2025-02-05T12:00:00Z"
        404:
          description: "공지사항이 없습니다"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No posts found"
        500:
          description: "서버 오류"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: -1002
                  message:
                    type: string
                    example: "공지사항 조회 중 서버 오류가 발생했습니다."
    post:
      tags:
        - Notice
      summary: "공지사항 생성"
      description: "새로운 공지사항을 추가하는 API입니다."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - content
                - author
                - type
              properties:
                title:
                  type: string
                  description: "공지사항 제목"
                  example: "전기안전 점검 안내"
                content:
                  type: string
                  description: "공지사항 내용"
                  example: "이번 주 금요일 전기안전 점검이 진행됩니다."
                author:
                  type: string
                  description: "작성자"
                  example: "관리자"
                type:
                  type: string
                  description: "공지사항 타입"
                  example: "공지"
      responses:
        201:
          description: "공지사항 생성 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Post created successfully"
                  postId:
                    type: string
                    example: "abcd1234"
        400:
          description: "잘못된 요청 (필수 항목이 누락된 경우)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Missing required fields"
        500:
          description: "서버 오류"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: -1002
                  message:
                    type: string
                    example: "공지사항 생성 중 서버 오류가 발생했습니다."

  /notice/{id}:
    get:
      tags:
        - Notice
      summary: "단일 공지사항 조회"
      description: "특정 ID의 공지사항을 조회하는 API입니다."
      parameters:
        - in: path
          name: id
          required: true
          description: "조회할 공지사항의 ID"
          schema:
            type: string
            example: "abcd1234"
      responses:
        200:
          description: "공지사항 정보"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: "공지사항 ID"
                    example: "abcd1234"
                  title:
                    type: string
                    description: "공지사항 제목"
                    example: "전기안전 점검 안내"
                  content:
                    type: string
                    description: "공지사항 내용"
                    example: "이번 주 금요일 전기안전 점검이 진행됩니다."
                  author:
                    type: string
                    description: "작성자"
                    example: "관리자"
                  createdAt:
                    type: string
                    format: date-time
                    description: "공지사항 작성 일시"
                    example: "2025-02-05T12:00:00Z"
        404:
          description: "공지사항을 찾을 수 없음"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Post not found"
        500:
          description: "서버 오류"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: -1002
                  message:
                    type: string
                    example: "공지사항 조회 중 서버 오류가 발생했습니다."
    put:
      tags:
        - Notice
      summary: "공지사항 수정"
      description: "특정 ID의 공지사항을 수정하는 API입니다."
      parameters:
        - in: path
          name: id
          required: true
          description: "수정할 공지사항의 ID"
          schema:
            type: string
            example: "abcd1234"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - content
                - author
              properties:
                title:
                  type: string
                  description: "공지사항 제목"
                  example: "전기안전 점검 안내 수정"
                content:
                  type: string
                  description: "공지사항 내용"
                  example: "이번 주 금요일 전기안전 점검이 진행됩니다. 수정"
                author:
                  type: string
                  description: "작성자"
                  example: "관리자"
      responses:
        200:
          description: "공지사항 수정 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Post updated successfully"
        400:
          description: "잘못된 요청 (필수 항목이 누락된 경우)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Missing required fields"
        404:
          description: "수정할 공지사항을 찾을 수 없음"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Post not found"
        500:
          description: "서버 오류"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: -1002
                  message:
                    type: string
                    example: "공지사항 수정 중 서버 오류가 발생했습니다."
    delete:
      tags:
        - Notice
      summary: "공지사항 삭제"
      description: "특정 ID의 공지사항을 삭제하는 API입니다."
      parameters:
        - in: path
          name: id
          required: true
          description: "삭제할 공지사항의 ID"
          schema:
            type: string
            example: "abcd1234"
      responses:
        200:
          description: "공지사항 삭제 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Post deleted successfully"
        404:
          description: "삭제할 공지사항을 찾을 수 없음"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Post not found"
        500:
          description: "서버 오류"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: -1002
                  message:
                    type: string
                    example: "공지사항 삭제 중 서버 오류가 발생했습니다."

  /faq:
    get:
      tags:
        - FAQ
      summary: "전체 FAQ 조회"
      description: "저장된 모든 FAQ를 조회하는 API입니다."
      responses:
        200:
          description: "FAQ 목록"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: "FAQ ID"
                      example: "faq1234"
                    question:
                      type: string
                      description: "FAQ 질문"
                      example: "전기안전 점검은 언제 하나요?"
                    answer:
                      type: string
                      description: "FAQ 답변"
                      example: "전기안전 점검은 매월 첫째 주 금요일에 진행됩니다."
        404:
          description: "FAQ가 없습니다"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No FAQ found"
        500:
          description: "서버 오류"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: -1002
                  message:
                    type: string
                    example: "FAQ 조회 중 서버 오류가 발생했습니다."
    post:
      tags:
        - FAQ
      summary: "FAQ 생성"
      description: "새로운 FAQ를 추가하는 API입니다."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - question
                - answer
              properties:
                question:
                  type: string
                  description: "FAQ 질문"
                  example: "전기안전 점검은 언제 하나요?"
                answer:
                  type: string
                  description: "FAQ 답변"
                  example: "전기안전 점검은 매월 첫째 주 금요일에 진행됩니다."
      responses:
        201:
          description: "FAQ 생성 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "FAQ created successfully"
                  faqId:
                    type: string
                    example: "faq1234"
        400:
          description: "잘못된 요청 (필수 항목이 누락된 경우)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Missing required fields"
        500:
          description: "서버 오류"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: -1002
                  message:
                    type: string
                    example: "FAQ 생성 중 서버 오류가 발생했습니다."

  /faq/{id}:
    get:
      tags:
        - FAQ
      summary: "단일 FAQ 조회"
      description: "특정 ID의 FAQ를 조회하는 API입니다."
      parameters:
        - in: path
          name: id
          required: true
          description: "조회할 FAQ의 ID"
          schema:
            type: string
            example: "faq1234"
      responses:
        200:
          description: "FAQ 정보"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: "FAQ ID"
                    example: "faq1234"
                  question:
                    type: string
                    description: "FAQ 질문"
                    example: "전기안전 점검은 언제 하나요?"
                  answer:
                    type: string
                    description: "FAQ 답변"
                    example: "전기안전 점검은 매월 첫째 주 금요일에 진행됩니다."
        404:
          description: "FAQ를 찾을 수 없음"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "FAQ not found"
        500:
          description: "서버 오류"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: -1002
                  message:
                    type: string
                    example: "FAQ 조회 중 서버 오류가 발생했습니다."
    put:
      tags:
        - FAQ
      summary: "FAQ 수정"
      description: "특정 ID의 FAQ를 수정하는 API입니다."
      parameters:
        - in: path
          name: id
          required: true
          description: "수정할 FAQ의 ID"
          schema:
            type: string
            example: "faq1234"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - question
                - answer
              properties:
                question:
                  type: string
                  description: "FAQ 질문"
                  example: "전기안전 점검은 언제 하나요?"
                answer:
                  type: string
                  description: "FAQ 답변"
                  example: "전기안전 점검은 매월 첫째 주 금요일에 진행됩니다."
      responses:
        200:
          description: "FAQ 수정 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "FAQ updated successfully"
        400:
          description: "잘못된 요청 (필수 항목이 누락된 경우)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Missing required fields"
        404:
          description: "수정할 FAQ를 찾을 수 없음"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "FAQ not found"
        500:
          description: "서버 오류"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: -1002
                  message:
                    type: string
                    example: "FAQ 수정 중 서버 오류가 발생했습니다."
    delete:
      tags:
        - FAQ
      summary: "FAQ 삭제"
      description: "특정 ID의 FAQ를 삭제하는 API입니다."
      parameters:
        - in: path
          name: id
          required: true
          description: "삭제할 FAQ의 ID"
          schema:
            type: string
            example: "faq1234"
      responses:
        200:
          description: "FAQ 삭제 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "FAQ deleted successfully"
        404:
          description: "삭제할 FAQ를 찾을 수 없음"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "FAQ not found"
        500:
          description: "서버 오류"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: -1002
                  message:
                    type: string
                    example: "FAQ 삭제 중 서버 오류가 발생했습니다."

  /inquiry:
    post:
      tags:
        - Inquiry
      summary: "1:1 문의 생성"
      description: "새로운 1:1 문의를 등록하는 API입니다."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - title
                - content
              properties:
                userId:
                  type: string
                  description: "사용자 ID"
                  example: "user123"
                title:
                  type: string
                  description: "문의 제목"
                  example: "결제 오류 문의"
                content:
                  type: string
                  description: "문의 내용"
                  example: "결제 진행 중 오류가 발생했습니다."
      responses:
        201:
          description: "문의 생성 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Inquiry created successfully"
                  inquiryId:
                    type: string
                    example: "abcd1234"
        400:
          description: "잘못된 요청 (필수 항목 누락)"
        500:
          description: "서버 오류"

    get:
      tags:
        - Inquiry
      summary: "전체 1:1 문의 조회"
      description: "등록된 모든 1:1 문의를 조회하는 API입니다."
      responses:
        200:
          description: "문의 목록"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: "문의 ID"
                      example: "abcd1234"
                    userId:
                      type: string
                      description: "사용자 ID"
                      example: "user123"
                    title:
                      type: string
                      description: "문의 제목"
                      example: "결제 오류 문의"
                    content:
                      type: string
                      description: "문의 내용"
                      example: "결제 진행 중 오류가 발생했습니다."
                    createdAt:
                      type: string
                      format: date-time
                      description: "문의 작성 일시"
                      example: "2025-02-05T12:00:00Z"
        404:
          description: "문의가 없습니다"
        500:
          description: "서버 오류"

  /inquiry/{id}:
    get:
      tags:
        - Inquiry
      summary: "단일 1:1 문의 조회"
      description: "특정 ID의 1:1 문의를 조회하는 API입니다."
      parameters:
        - in: path
          name: id
          required: true
          description: "조회할 문의의 ID"
          schema:
            type: string
            example: "abcd1234"
      responses:
        200:
          description: "문의 정보"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "abcd1234"
                  userId:
                    type: string
                    example: "user123"
                  title:
                    type: string
                    example: "결제 오류 문의"
                  content:
                    type: string
                    example: "결제 진행 중 오류가 발생했습니다."
                  createdAt:
                    type: string
                    format: date-time
                    example: "2025-02-05T12:00:00Z"
        404:
          description: "문의가 없습니다"
        500:
          description: "서버 오류"

    put:
      tags:
        - Inquiry
      summary: "1:1 문의 수정"
      description: "특정 ID의 1:1 문의를 수정하는 API입니다."
      parameters:
        - in: path
          name: id
          required: true
          description: "수정할 문의의 ID"
          schema:
            type: string
            example: "abcd1234"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "결제 오류 문의 (수정됨)"
                content:
                  type: string
                  example: "결제 진행 중 오류가 발생했습니다. (수정됨)"
                status:
                  type: string
                  example: "resolved"
      responses:
        200:
          description: "문의 수정 성공"
        400:
          description: "잘못된 요청"
        404:
          description: "문의가 없습니다"
        500:
          description: "서버 오류"

    delete:
      tags:
        - Inquiry
      summary: "1:1 문의 삭제"
      description: "특정 ID의 1:1 문의를 삭제하는 API입니다."
      parameters:
        - in: path
          name: id
          required: true
          description: "삭제할 문의의 ID"
          schema:
            type: string
            example: "abcd1234"
      responses:
        200:
          description: "문의 삭제 성공"
        404:
          description: "문의가 없습니다"
        500:
          description: "서버 오류"

  /inquiry/user/{userId}:
    get:
      tags:
        - Inquiry
      summary: "특정 사용자 1:1 문의 조회"
      description: "특정 사용자의 1:1 문의 내역을 조회하는 API입니다."
      parameters:
        - in: path
          name: userId
          required: true
          description: "조회할 사용자 ID"
          schema:
            type: string
            example: "user1234"
      responses:
        200:
          description: "특정 사용자 문의 목록"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: "문의 ID"
                      example: "xyz9876"
                    question:
                      type: string
                      description: "문의 내용"
                      example: "배송 일정이 궁금합니다."
                    answer:
                      type: string
                      description: "관리자 답변"
                      example: "배송은 3~5일 소요됩니다."
                    status:
                      type: string
                      enum: ["pending", "answered"]
                      description: "문의 상태"
                      example: "pending"
                    createdAt:
                      type: string
                      format: date-time
                      description: "문의 작성 일시"
                      example: "2025-03-10T15:00:00Z"
        404:
          description: "해당 사용자의 문의가 없습니다"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No inquiries found for this user"
        500:
          description: "서버 오류"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: -1002
                  message:
                    type: string
                    example: "사용자 문의 조회 중 서버 오류가 발생했습니다."

  /inquiry/{id}/answer:
    post:
      tags:
        - Inquiry
      summary: 문의에 대한 답변 제출
      description: 문의에 답변을 업데이트하고 상태를 "답변 완료"로 변경합니다.
      parameters:
        - name: id
          in: path
          required: true
          description: 문의의 ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                answer:
                  type: string
                  description: 문의에 대한 답변
              required:
                - answer
      responses:
        200:
          description: 답변이 성공적으로 제출되었습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        400:
          description: 잘못된 요청 (답변 누락)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        404:
          description: 문의를 찾을 수 없습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        500:
          description: 서버 내부 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /camera:
    get:
      tags:
        - Camera
      summary: 모든 카메라 목록 조회
      operationId: getCameras
      responses:
        '200':
          description: 성공적으로 카메라 목록을 가져옴
          content:
            application/json:
              schema:
                type: object
        '500':
          description: 서버 오류
    post:
      tags:
        - Camera
      summary: 새로운 카메라 추가
      operationId: addCamera
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, ip, imageUrl]
              properties:
                name:
                  type: string
                  description: 카메라 이름
                ip:
                  type: string
                  description: 카메라 IP주소
                imageUrl:
                  type: string
                  description: 카메라 이미지 URL
      responses:
        '201':
          description: 카메라가 성공적으로 추가됨
        '400':
          description: 요청 데이터 오류
        '500':
          description: 서버 오류

  /camera/{id}:
    get:
      tags:
        - Camera
      summary: 특정 카메라 정보 조회
      operationId: getCameraById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 요청된 카메라 정보 반환
        '404':
          description: 카메라를 찾을 수 없음
        '500':
          description: 서버 오류
    put:
      tags:
        - Camera
      summary: 특정 카메라 정보 수정
      operationId: updateCamera
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, ip, imageUrl]
              properties:
                name:
                  type: string
                ip:
                  type: string
                imageUrl:
                  type: string
      responses:
        '200':
          description: 카메라 정보가 성공적으로 업데이트됨
        '400':
          description: 요청 데이터 오류
        '500':
          description: 서버 오류
    delete:
      tags: 
        - Camera
      summary: 특정 카메라 삭제
      operationId: deleteCamera
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 카메라가 성공적으로 삭제됨
        '500':
          description: 서버 오류

  /sensor:
    get:
      tags:
        - Sensor(관리자)
      summary: 모든 센서 조회
      description: Firebase Realtime Database에 저장된 모든 센서 목록을 가져옵니다. 페이지네이션을 지원하며, `limit`과 `page` 파라미터를 사용하여 데이터를 나누어 조회할 수 있습니다. 파라미터가 없을 경우 전체 데이터를 반환합니다.
      operationId: getSensors
      parameters:
        - name: limit
          in: query
          description: 조회할 데이터 수 (기본값: 10)
          required: false
          schema:
            type: integer
            default: 10
        - name: page
          in: query
          description: 조회할 페이지 번호 (기본값: 1)
          required: false
          schema:
            type: integer
            default: 1
      responses:
        "200":
          description: 센서 목록을 성공적으로 조회함
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 센서 목록 조회 성공
                  totalSensors:
                    type: integer
                    example: 100
                  totalPages:
                    type: integer
                    example: 10
                  currentPage:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 10
                  sensors:
                    type: array
                    items:
                      type: object
                      properties:
                        sensorId:
                          type: string
                          example: "sensor123"
                        imageUrl:
                          type: string
                          example: "http://example.com/image.jpg"
                        groupId:
                          type: string
                          example: "group1"
                        sensorName:
                          type: string
                          example: "온도 센서"
        "500":
          description: 서버 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 서버 내부 오류
    post:
      tags:
        - Sensor(관리자)
      summary: 새로운 센서 추가
      description: Firebase Realtime Database에 새 센서를 추가합니다.
      operationId: createSensor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [sensorId, groupId, sensorName, imageUrl]
              properties:
                sensorId:
                  type: string
                  description: 센서의 고유 식별자
                groupId:
                  type: string
                  description: 센서가 속한 그룹 ID
                sensorName:
                  type: string
                  description: 센서 이름
                imageUrl:
                  type: string
                  description: 센서 이미지 URL
      responses:
        "200":
          description: 센서가 성공적으로 추가됨
        "500":
          description: 서버 오류
  
  /sensor/{sensorId}:
    get:
      tags:
        - Sensor(관리자)
      summary: 특정 센서 조회
      description: 센서 ID를 사용하여 특정 센서 정보를 가져옵니다.
      operationId: getSensorById
      parameters:
        - name: sensorId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 센서 정보를 성공적으로 조회함
        "500":
          description: 서버 오류
    put:
      tags:
        - Sensor(관리자)
      summary: 센서 정보 수정
      description: Firebase Realtime Database에 저장된 기존 센서 정보를 수정합니다.
      operationId: updateSensor
      parameters:
        - name: sensorId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                groupId:
                  type: string
                  description: 센서가 속한 그룹 ID
                sensorName:
                  type: string
                  description: 센서 이름
                imageUrl:
                  type: string
                  description: 센서 이미지 URL
      responses:
        "200":
          description: 센서 정보가 성공적으로 수정됨
        "500":
          description: 서버 오류
    delete:
      tags:
        - Sensor(관리자)
      summary: 센서 삭제
      description: Firebase Realtime Database에서 센서를 삭제합니다.
      operationId: deleteSensor
      parameters:
        - name: sensorId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 센서가 성공적으로 삭제됨
        "500":
          description: 서버 오류

  /sensor/search/{sensorName}:
    get:
      tags:
        - Sensor(관리자)
      summary: 센서 이름으로 조회
      description: 특정 센서 이름을 포함하는 센서 목록을 가져옵니다.
      operationId: searchSensorsByName
      parameters:
        - name: sensorName
          in: path
          required: true
          schema:
            type: string
          description: 검색할 센서 이름
      responses:
        "200":
          description: 센서 목록을 성공적으로 조회함
        "500":
          description: 서버 오류

  /sensor/users/{userId}/temps:
    post:
      tags:
        - Sensor(유저)
      summary: 센서 키 등록
      description: 사용자의 센서 키를 등록합니다.
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: 사용자 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sensorId
              properties:
                sensorId:
                  description: 센서 키
                  type: string
                  example: ABCD
      responses:
        "200":
          description: 센서 키가 등록되었습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  sensorId:
                    type: string
        "400":
          description: 요청 바디 오류
        "500":
          description: 서버 오류

    get:
      tags:
        - Sensor(유저)
      summary: 센서 키 목록 조회
      description: 사용자가 등록한 센서 키 목록을 조회합니다.
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: 사용자 ID
      responses:
        "200":
          description: 센서 키 목록 반환
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                  sensors:
                    type: array
                    items:
                      type: string
        "404":
          description: 센서 키가 없습니다.
        "500":
          description: 서버 오류

  /sensor/users/{userId}/temps/{sensorId}:
    delete:
      tags:
        - Sensor(유저)
      summary: 센서 키 삭제
      description: 사용자의 특정 센서 키를 삭제합니다.
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: 사용자 ID
        - in: path
          name: sensorId
          required: true
          schema:
            type: string
          description: 삭제할 센서 ID
      responses:
        "200":
          description: 센서 키 삭제 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  sensorId:
                    type: string
        "404":
          description: 센서 키를 찾을 수 없음
        "500":
          description: 서버 오류

  /temp/{sensorId}:
    get:
      tags:
        - Temperature
      summary: 특정 센서의 모든 데이터 조회
      parameters:
        - in: path
          name: sensorId
          required: true
          schema:
            type: string
          description: 센서의 고유 ID
      responses:
        "200":
          description: 센서 데이터 반환
          content:
            application/json:
              schema:
                type: object
        "404":
          description: 데이터가 없을 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "500":
          description: 서버 오류

  /temp/{sensorId}/latest:
    get:
      tags:
        - Temperature
      summary: 특정 센서의 최신 데이터 조회
      parameters:
        - in: path
          name: sensorId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 최신 데이터 반환
          content:
            application/json:
              schema:
                type: object
        "404":
          description: 데이터가 없을 경우
        "500":
          description: 서버 오류

  /temp/{sensorId}/daily-average/{date}:
    get:
      tags:
        - Temperature
      summary: 특정 센서의 일간 평균 데이터 조회
      parameters:
        - in: path
          name: sensorId
          required: true
          schema:
            type: string
        - in: path
          name: date
          required: true
          schema:
            type: string
            format: date
          description: YYYY-MM-DD 형식의 날짜
      responses:
        "200":
          description: 전체 평균 및 시간별 평균 반환
          content:
            application/json:
              schema:
                type: object
                properties:
                  overallAvg:
                    type: number
                  hourlyAvg:
                    type: object
                    additionalProperties:
                      type: number
        "404":
          description: 데이터가 없을 경우
        "500":
          description: 서버 오류

  /temp/{sensorId}/monthly-average/{year}/{month}:
    get:
      tags:
        - Temperature
      summary: 특정 센서의 월간 평균 데이터 조회
      parameters:
        - in: path
          name: sensorId
          required: true
          schema:
            type: string
        - in: path
          name: year
          required: true
          schema:
            type: integer
        - in: path
          name: month
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 12
      responses:
        "200":
          description: 전체 평균 및 주차별 평균 반환
          content:
            application/json:
              schema:
                type: object
                properties:
                  overallAvg:
                    type: number
                  weeklyAvg:
                    type: object
                    additionalProperties:
                      type: number
        "404":
          description: 데이터가 없을 경우
        "500":
          description: 서버 오류

  /temp/{sensorId}/yearly-average/{year}:
    get:
      tags:
        - Temperature
      summary: 특정 센서의 연간 평균 데이터 조회
      parameters:
        - in: path
          name: sensorId
          required: true
          schema:
            type: string
        - in: path
          name: year
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 전체 평균 및 월별 평균 반환
          content:
            application/json:
              schema:
                type: object
                properties:
                  overallAvg:
                    type: number
                  monthlyAvg:
                    type: object
                    additionalProperties:
                      type: number
        "404":
          description: 데이터가 없을 경우
        "500":
          description: 서버 오류

    components:
      schemas:
        TemperatureData:
          type: object
          properties:
            sensorId:
              type: string
            temperature:
              type: number
            timestamp:
              type: string
              format: date-time

    /daily-average:
    get:
      summary: 일간 평균 온도 데이터 조회
      responses:
        200:
          description: 일간 평균 온도 데이터를 성공적으로 반환
          content:
            application/json:
              schema:
                type: object
                properties:
                  dailyAverages:
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                          format: date
                          description: 날짜 (YYYY-MM-DD 형식)
                        avg:
                          type: number
                          description: 해당 날짜의 평균 온도
        404:
          description: 데이터를 찾을 수 없음
        500:
          description: 서버 오류
  
  # /temp/daily-average/{date}:
  #   get:
  #     tags:
  #       - Temperature
  #     summary: 일별 평균 온도 조회
  #     description: 특정 날짜의 전체 및 시간별 평균 온도를 조회합니다.
  #     parameters:
  #       - name: date
  #         in: path
  #         required: true
  #         schema:
  #           type: string
  #           format: date
  #         description: YYYY-MM-DD 형식의 날짜
  #     responses:
  #       200:
  #         description: 일별 온도 데이터를 성공적으로 조회함
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 overallAvg:
  #                   type: number
  #                 hourlyAvg:
  #                   type: object
  #                   additionalProperties:
  #                     type: number
  #       404:
  #         description: 해당 날짜의 데이터를 찾을 수 없음
  #       500:
  #         description: 서버 오류

  # /temp/monthly-average/{year}/{month}:
  #   get:
  #     tags:
  #       - Temperature
  #     summary: 월별 평균 온도 조회
  #     description: 특정 월의 전체 및 주별 평균 온도를 조회합니다.
  #     parameters:
  #       - name: year
  #         in: path
  #         required: true
  #         schema:
  #           type: integer
  #       - name: month
  #         in: path
  #         required: true
  #         schema:
  #           type: integer
  #     responses:
  #       200:
  #         description: 월별 온도 데이터를 성공적으로 조회함
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 overallAvg:
  #                   type: number
  #                 weeklyAvg:
  #                   type: object
  #                   additionalProperties:
  #                     type: number
  #       404:
  #         description: 해당 월의 데이터를 찾을 수 없음
  #       500:
  #         description: 서버 오류

  # /temp/yearly-average/{year}:
  #   get:
  #     tags:
  #       - Temperature
  #     summary: 연별 평균 온도 조회
  #     description: 특정 연도의 전체 및 월별 평균 온도를 조회합니다.
  #     parameters:
  #       - name: year
  #         in: path
  #         required: true
  #         schema:
  #           type: integer
  #     responses:
  #       200:
  #         description: 연별 온도 데이터를 성공적으로 조회함
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 overallAvg:
  #                   type: number
  #                 monthlyAvg:
  #                   type: object
  #                   additionalProperties:
  #                     type: number
  #       404:
  #         description: 해당 연도의 데이터를 찾을 수 없음
  #       500:
  #         description: 서버 오류
  
  /group:
    post:
      tags:
        - Group
      summary: "그룹 추가"
      description: "단지 ID를 기반으로 새로운 그룹를 추가합니다."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["groupName"]
              properties:
                groupName:
                  type: string
                  description: "그룹 이름"
                  example: "101동"
                criticalTemperature:
                  type: number
                  description: "그룹의 임계 온도"
                  example: 50
      responses:
        201:
          description: "그룹이 성공적으로 추가됨"
        500:
          description: "서버 오류"

    put:
      tags:
        - Group
      summary: "그룹 수정"
      description: "그룹 ID를 기반으로 이름을 수정합니다."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                groupId:
                  type: string
                  example: "-OM9S7Zs4RIKzW4izw4H"
                newName:
                  type: string
                  example: "201동"
                criticalTemperature:
                  type: number
                  example: 50
      responses:
        200:
          description: "그룹이 성공적으로 수정됨"
        500:
          description: "서버 오류"

    delete:
      tags:
        - Group
      summary: "그룹 삭제"
      description: "그룹 ID를 기반으로 그룹를 삭제합니다."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                groupId:
                  type: string
                  example: "-OM9S7Zs4RIKzW4izw4H"
      responses:
        200:
          description: "그룹이 성공적으로 삭제됨"
        500:
          description: "서버 오류"

  /group/{groupId}:
    get:
      tags:
        - Group
      summary: "그룹 상세 조회"
      description: "그룹 ID를 기반으로 그룹 정보를 가져옵니다."
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
          example: "-OM9SXC1NaXBhV-b2oV2"
      responses:
        200:
          description: "그룹 정보 반환"
        500:
          description: "서버 오류"

  /group/search/{name}:
    get:
      summary: 그룹 이름으로 검색
      description: 특정 그룹 이름이 포함된 그룹 목록을 반환합니다.
      tags:
        - Group
      parameters:
        - name: name
          in: path
          required: true
          description: 검색할 그룹 이름
          schema:
            type: string
      responses:
        200:
          description: 검색된 그룹 목록 반환
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "apt123"
                    name:
                      type: string
                      example: "강남1차 그룹"
                    temp:
                      type: number
                      nullable: true
                      example: 25
        500:
          description: 서버 오류 발생

  /group/{groupId}/sensors:
    get:
      tags:
        - Group
      summary: 특정 그룹의 센서 조회 (페이지네이션 포함)
      description: |
        Firebase Realtime Database에서 지정된 그룹 ID와 연결된 센서 데이터를 페이지네이션을 적용하여 조회합니다.
      parameters:
        - name: groupId
          in: path
          required: true
          description: 조회할 그룹의 ID
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: 조회할 페이지 번호 (기본값: 1)
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          description: 한 페이지당 조회할 센서 개수 (기본값: 10)
          schema:
            type: integer
            example: 10
      responses:
        "200":
          description: 센서 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "센서 목록 조회 성공"
                  totalCount:
                    type: integer
                    example: 50
                  totalPages:
                    type: integer
                    example: 5
                  currentPage:
                    type: integer
                    example: 1
                  devices:
                    type: array
                    items:
                      type: object
                      properties:
                        sensorId:
                          type: string
                          example: "sensor123"
                        groupId:
                          type: string
                          example: "apt456"
                        sensorType:
                          type: string
                          example: "온도"
                        value:
                          type: number
                          example: 22.5
        "400":
          description: 잘못된 요청 (예: 존재하지 않는 그룹 ID)
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: -1001
                  message:
                    type: string
                    example: "잘못된 요청입니다."
        "500":
          description: 서버 오류
          content:
            application/json:
              schema:
                type: string
                example: "서버 내부 오류"

  /groups:
    get:
      tags:
        - Group
      summary: 그룹 목록 조회
      description: |
        Firebase Realtime Database에서 그룹 목록을 조회합니다.
      responses:
        "200":
          description: 그룹 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "그룹 목록 조회 성공"

        "500":
          description: 서버 오류
          content:
            application/json:
              schema:
                type: string
                example: "서버 내부 오류" 
                
  /events/stats:
    get:
      tags:
        - Event
      summary: 온도 통계 조회 및 변화율 계산
      description: 전체, 연간, 월간, 주간 데이터 개수와 최고 온도 및 변화율을 조회합니다.
      responses:
        "200":
          description: 온도 통계 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "온도 통계 조회 성공"
                  stats:
                    type: object
                    properties:
                      totalCount:
                        type: integer
                        description: 전체 온도 데이터 개수
                        example: 150
                      yearlyCount:
                        type: integer
                        description: 연간 온도 데이터 개수
                        example: 120
                      monthlyCount:
                        type: integer
                        description: 월간 온도 데이터 개수
                        example: 30
                      weeklyCount:
                        type: integer
                        description: 주간 온도 데이터 개수
                        example: 7
                      maxTemp:
                        type: number
                        description: 최고 온도
                        example: 42.5
                      totalCountChange:
                        type: number
                        description: 전체 데이터 개수 변화율
                        example: 15.0
                      yearlyCountChange:
                        type: number
                        description: 연간 데이터 개수 변화율
                        example: 10.0
                      monthlyCountChange:
                        type: number
                        description: 월간 데이터 개수 변화율
                        example: -5.0
                      weeklyCountChange:
                        type: number
                        description: 주간 데이터 개수 변화율
                        example: 20.0
                      maxTempChange:
                        type: number
                        description: 최고 온도 변화율
                        example: 5.0
        "500":
          description: 서버 오류
          content:
            application/json:
              schema:
                type: string
                example: "서버 오류"
  /upload:
    post:
      tags:
        - Upload
      summary: 파일 업로드
      description: 파일을 서버에 업로드하고 Firebase에 저장된 후 해당 URL을 반환합니다.
      operationId: uploadFile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: 업로드할 파일
      responses:
        "200":
          description: 파일 업로드 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    format: uri
                    description: 업로드된 파일의 URL
        "400":
          description: 파일이 업로드되지 않음
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "500":
          description: 서버 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string